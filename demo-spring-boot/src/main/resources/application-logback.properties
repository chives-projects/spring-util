#日志组件
#启动日志访问组件，默认：true
eagle.logger.enabled=true
#日志文件存放路径，默认是:./logs
eagle.logger.appender.path=./logs
#如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true
eagle.logger.appender.append=true
#如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false|Support multiple-JVM writing to the same log file
eagle.logger.appender.prudent=false
#设置是否将输出流刷新，确保日志信息不丢失，默认：true
eagle.logger.appender.immediate-flush=true
#是否报告内部状态信息，默认；false
eagle.logger.appender.report-state=false
#是否开启基于文件大小和时间的SizeAndTimeBasedRollingPolicy归档策略
#默认是基于TimeBasedRollingPolicy的时间归档策略，默认false
eagle.logger.appender.rolling-policy.type=size_and_time_based
#设置要保留的最大存档文件数量，以异步方式删除旧文件,默认 14
eagle.logger.appender.rolling-policy.max-history=14
#最大日志文件大小 KB、MB、GB，默认:500MB
eagle.logger.appender.rolling-policy.max-file-size=10MB
#控制所有归档文件总大小 KB、MB、GB，默认:5GB
eagle.logger.appender.rolling-policy.total-size-cap=5GB
#设置重启服务后是否清除历史日志文件，默认：false
eagle.logger.appender.rolling-policy.clean-history-on-start=false
#是否开启异步记录Appender，默认false
eagle.logger.appender.async.enabled=false
#队列的最大容量，默认为 256
eagle.logger.appender.async.queue-size=256
#默认，当队列还剩余 20% 的容量时，会丢弃级别为 TRACE, DEBUG 与 INFO 的日志，仅仅只保留 WARN 与 ERROR 级别的日志。想要保留所有的事件，可以设置为 0
eagle.logger.appender.async.discarding-threshold=0
# 根据所引用 appender 队列的深度以及延迟， AsyncAppender 可能会耗费长时间去刷新队列。
# 当 LoggerContext 被停止时， AsyncAppender stop 方法会等待工作线程指定的时间来完成。
# 使用 maxFlushTime 来指定最大的刷新时间，单位为毫秒。在指定时间内没有被处理完的事件将会被丢弃。这个属性的值的含义与 Thread.join(long)) 相同
# 默认是 1000毫秒
eagle.logger.appender.async.max-flush-time=1000
# 在队列满的时候 appender 会阻塞而不是丢弃信息。设置为 true，appender 不会阻塞你的应用而会将消息丢弃，默认为 false
eagle.logger.appender.async.never-block=false
# root
#日志级别,即该等级之上才会输出，ERROR > WARN > INFO > DEBUG > TRACE >ALL, 默认：DEBUG
eagle.logger.root.level=info
#通用日志输出格式，默认：[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%15.15t] [%-40.40logger{39}:%-4.4line] : %msg%n
eagle.logger.root.pattern=[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%15.15t] [%-40.40logger{39}:%-4.4line] : %msg%n
#通用控制台打印格式，带颜色
eagle.logger.root.pattern-console=%d{yyyy-MM-dd HH:mm:ss.SSS} %clr(%5p) [%15.15t] %clr(%-40.40logger{39}:%4.4line){cyan} : %m%n%wEx
#基础日志文件路径，默认：""
eagle.logger.root.file-path=
#是否将日志信息输出到控制台，默认：true
eagle.logger.root.console=true
# group
#日志级别,即该等级之上才会输出，ERROR > WARN > INFO > DEBUG > TRACE >ALL, 默认：DEBUG
eagle.logger.group.level=info
#模块日志输出格式，默认：[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%15.15thread] [%40.40logger{39}:%-4.4line] : %msg%n
eagle.logger.group.pattern=[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%15.15thread] [%40.40logger{39}:%-4.4line] : %msg%n
#是否将模块日志输出到控制台，默认：false
eagle.logger.group.console=false
# module
#日志级别,即该等级之上才会输出，ERROR > WARN > INFO > DEBUG > TRACE >ALL, 默认：DEBUG
eagle.logger.module.level=info
#模块日志输出格式，默认：%msg%n
eagle.logger.module.pattern=%msg%n
#是否将模块日志输出到控制台，默认：false
eagle.logger.module.console=false